{"version":3,"file":"static/js/252.0b4de919.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactItem.module.css?d8e1","components/ContactList/ContactItem.jsx","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/Contacts/Contacts.jsx","redux/selectors.js"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"contact_wrapper\":\"ContactForm_contact_wrapper__GNdtz\",\"title\":\"ContactForm_title__jZguf\",\"contact_form\":\"ContactForm_contact_form__MxVfX\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"btn\":\"ContactForm_btn__wll+u\"};","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\nimport css from './ContactForm.module.css'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/operations';\nimport { selectContacts } from 'redux/selectors';\nimport Notiflix from 'notiflix';\n\nNotiflix.Notify.init({\n  position: 'center-top',\n  });\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  \n  const onAddContact = (newContact) => {\n    dispatch(addContact(newContact));\n  };\n\n  const [ name, setName ] = useState('');\n  const [ number, setNumber ] = useState('');\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    if(name === 'name'){\n      setName(value);\n    }else if(name === 'number'){\n      setNumber(value);\n    }\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n\n    if (name.trim() === '' || number.trim() === '') {\n      return;\n    }\n\n    const nameExists = contacts.some((contact) => contact.name.toLowerCase() === name.toLowerCase());\n\n    if (nameExists) {\n      Notiflix.Notify.warning(`${name} is already in contacts!!!`);\n      return;\n    }else{\n      Notiflix.Notify.success(`${name} successfully added to contacts :)`);\n    }\n\n    const newContact = {\n      id: nanoid(),\n      name: name,\n      number: number\n    }\n\n    setName('');\n    setNumber('');\n    onAddContact(newContact);\n  };\n\n    return (\n      <div className={css.contact_wrapper}>\n        <form onSubmit={handleSubmit} className={css.contact_form}>\n          <label className={css.label}>\n            <span>Name</span>\n            <input\n              type=\"text\"\n              name=\"name\"\n              placeholder='Enter your name...'\n              maxLength={15}\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n              value={name}\n              onChange={handleChange}\n              className={css.input}\n            />\n          </label>\n          <label className={css.label}>\n            <span>Number</span>\n            <input\n              type=\"tel\"\n              name=\"number\"\n              placeholder='Enter your number...'\n              maxLength={15}\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n              value={number}\n              onChange={handleChange}\n              className={css.input}\n            />\n          </label>\n          <button type='submit' className={css.btn}>Add contact</button>\n        </form>\n      </div>\n    );\n  };\n\nContactForm.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  onAddContact: PropTypes.func.isRequired,\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper_item\":\"ContactItem_wrapper_item__6ZXy0\",\"list\":\"ContactItem_list__g09Pm\",\"btn\":\"ContactItem_btn__yu20t\",\"title\":\"ContactItem_title__JVf5n\",\"contact\":\"ContactItem_contact__QOGpz\",\"no_contact\":\"ContactItem_no_contact__WlX-r\"};","import PropTypes from 'prop-types';\nimport css from './ContactItem.module.css'\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\nimport Notiflix from 'notiflix';\n\nNotiflix.Notify.init({\n  position: 'center-top',\n  });\n\nconst ContactItem = ({ contact }) => {\n  const { id, name, number } = contact;\n  const dispatch = useDispatch();\n\n  const handleDeleteContact = () => {\n    dispatch(deleteContact(id));\n    Notiflix.Notify.success(`Contact ${name} successfully deleted`)\n  };\n  \n    return (\n      <li className={css.list}>\n        {name}: {number}\n        <button onClick={handleDeleteContact} className={css.btn}>Delete</button>\n      </li>\n    );\n  };\n  \n  ContactItem.propTypes = {\n    contact: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      phone: PropTypes.string.isRequired,\n    }).isRequired,\n    onDelete: PropTypes.func.isRequired,\n  };\nexport default ContactItem;\n","import React, { useEffect } from 'react';\nimport ContactItem from './ContactItem';\nimport PropTypes from 'prop-types';\nimport css from './ContactItem.module.css'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchAllContacts } from 'redux/operations';\nimport { selectContacts, selectError, selectFilter, selectIsLoading } from 'redux/selectors';\nimport Loader from 'components/Loader';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const error = useSelector(selectError);\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchAllContacts())\n  },[dispatch]);\n\n  const getFilteredContacts = () => {\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(filter)\n    );\n  };\n  if (isLoading) {\n    return <Loader/>;\n  }\n  \n  if (error) {\n    return <p>Error: {error}</p>;\n  }\n\n  const filteredContacts = getFilteredContacts();\n\n  if(filteredContacts.length > 0) {\n    return (\n      <ul className={css.wrapper_item}>\n        {filteredContacts.map((contact) => (\n          <ContactItem\n            key={contact.id}\n            contact={contact}\n          />\n        ))}\n      </ul>\n    );\n  }else{\n    return (\n      <ul className={css.wrapper_item}>\n        <span className={css.no_contact}>No contacts, add a contact</span>\n      </ul>\n    );\n  }\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"Filter_input__N7T3z\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport css from './Filter.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filterReducer';\nimport { selectFilter } from 'redux/selectors';\n\nconst Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const onChangeFilter = (filter) => {\n    dispatch(setFilter(filter));\n  };\n\n  const handleChange = (event) => {\n    onChangeFilter(event.currentTarget.value.toLowerCase());\n  };\n\n  return (\n    <input\n      type=\"text\"\n      placeholder=\" Search by name\"\n      value={filter}\n      onChange={handleChange}\n      className={css.input}\n    />\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  onChangeFilter: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport React from 'react'\nimport css from '../../components/ContactList/ContactItem.module.css'\n\nconst Contacts = () => {\n  return (\n    <div className={css.contact}>\n       <ContactForm/>\n        <h2 className={css.title}>Contacts</h2>\n        <Filter/>\n        <ContactList/>\n    </div>\n  )\n}\n\nexport default Contacts;","\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.auth.error;\n\nexport const selectFilter = state => state.filter;"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","Notiflix","position","dispatch","useDispatch","contacts","useSelector","selectContacts","useState","name","setName","number","setNumber","handleChange","event","target","value","className","css","onSubmit","preventDefault","trim","some","contact","toLowerCase","newContact","addContact","onAddContact","type","placeholder","maxLength","pattern","title","required","onChange","onClick","deleteContact","filter","selectFilter","error","selectError","isLoading","selectIsLoading","useEffect","fetchAllContacts","Loader","filteredContacts","includes","length","map","setFilter","onChangeFilter","currentTarget","state","items","auth"],"sourceRoot":""}